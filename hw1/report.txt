Josh Calahan
CPE512 Homework # 1
September 6, 2010

1) Implement "hello, world" MPI, PThread, and OpenMP programs.

MPI output:
Hello World from MPI Process #0
Number of MPI Processes = 8
Hello World from MPI Process #1
Hello World from MPI Process #2
Hello World from MPI Process #3
Hello World from MPI Process #4
Hello World from MPI Process #5
Hello World from MPI Process #6
Hello World from MPI Process #7

PThread output:
Hello World, from PThread 0
Hello World, from PThread 1
Hello World, from PThread 3
Hello World, from PThread 6
Hello World, from PThread 4
Hello World, from PThread 5
Hello World, from PThread 7
Number of threads = 8
Hello World, from PThread 2

OpenMP output:
Hello World from thread = 1
Hello World from thread = 0
Hello World from thread = 2
Number of Threads = 8
Hello World from thread = 5
Hello World from thread = 3
Hello World from thread = 4
Hello World from thread = 6
Hello World from thread = 7

(a) The output is different each time the programs are executed. This is because the the OS schedules each process and thread differently each time they are executed.

(b) When the Mutexs are removed from the pthread program the output messages are interlived somewhat randomly. This is because the standard output statements are not atomic. The OS is interrupting the write statements randomly; each thread's messages are being put out in partially as they are interupped by the OS.  

Example output:
Hello World, from PThread Hello World, from PThread Hello World, from PThread 01
Hello World, from PThread 3
4
Hello World, from PThread 6
Hello World, from PThread 7
Hello World, from PThread 5
Number of threads = 8Hello World, from PThread 2

(c) When the Critical statements are removed from the OpenMPI program, as with the pthread version, the output message are intervlieved somewhat randomly. Again, this is because the standard output statements are not atomic. The OS is interrupting the write statements randomly; each thread's messages are being put out in partially as they are interupped by the OS.
 
Example output:
Hello World from thread = Hello World from thread = Hello World from thread = 321
Hello World from thread = 0
Number of Threads = 8
Hello World from thread = 5
Hello World from thread = 6
Hello World from thread = 7
Hello World from thread = 4

2) Hybrid MPI/PThread "hello, world" program.

Source code with compile statements (note error checking is removed for clarity):

/* 
MPI/PThread Hybrid Example
FILE: hello_world_MPI_PTH.cpp
To compile:
   $ icc hello_world_MPI_PTH.cpp -o hello_world_MPI_PTH -lmpi -lmpi++ -lpthread 
To run (on N processors and M threads):
   $ mpirun -np N ./hello_world_MPI_PTH M
*/

#include <pthread.h>
#include <stdio.h>
#include <mpi.h>

pthread_mutex_t MUTEX;

struct thread_params { int rank, thread; };

void* hello_world_MPI_PTH(void* arg) {
   thread_params* params = (thread_params*)arg;

   pthread_mutex_lock(&MUTEX);

   printf("Hello World from MPI Process %d Thread %d\n",
          params->rank,
          params->thread);
   fflush(stdout);

   pthread_mutex_unlock(&MUTEX);

   return arg;
}

int main (int argc, char** argv)
{
   int nprocs, rank;
   MPI_Init(&argc, &argv);
   MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);

   if (2!=argc) {
      if (0==rank) fprintf(stderr, "ERROR: Usage: mpirun"
        " -np n_procs ./hello_world_MPI_PTH n_threads\n");
      MPI_Finalize();
      return 1;
   }

   int nthreads = atoi(argv[1]);

   pthread_mutex_init(&MUTEX, NULL);

   if (0==rank) {
      printf("nprocs=%d, nthreads=%d\n", nprocs, nthreads);
      fflush(stdout);
   }

   pthread_t* threads = new pthread_t[nthreads];
   thread_params* params = new thread_params[nthreads];

   for (int i=0; i<nthreads; ++i) {
      params[i].rank = rank;
      params[i].thread = i;
      pthread_create(threads+i, NULL, hello_world_MPI_PTH, params+i);
   }

   for (int i=0; i<nthreads; ++i) 
      pthread_join(threads[i], NULL);        

   MPI_Finalize();
   return 0;
}

Example command-line execution and output:
mpirun -np 4 ./hello_world_MPI_PTH 4
nprocs=4, nthreads=4
Hello World from MPI Process 1 Thread 0
Hello World from MPI Process 1 Thread 1
Hello World from MPI Process 1 Thread 2
Hello World from MPI Process 1 Thread 3
Hello World from MPI Process 2 Thread 0
Hello World from MPI Process 2 Thread 1
Hello World from MPI Process 0 Thread 0
Hello World from MPI Process 3 Thread 0
Hello World from MPI Process 0 Thread 1
Hello World from MPI Process 3 Thread 2
Hello World from MPI Process 3 Thread 3
Hello World from MPI Process 0 Thread 2
Hello World from MPI Process 2 Thread 2
Hello World from MPI Process 0 Thread 3
Hello World from MPI Process 2 Thread 3
Hello World from MPI Process 3 Thread 1
